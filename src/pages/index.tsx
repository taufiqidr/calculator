import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import type { FormEvent } from "react";

import { type Pages } from "~/types/types";

const Home: NextPage = () => {
  const [currentPage, setCurrentPage] = useState("resin");

  // const [title, setTitle] = useState('Resin')
  const pages: Pages = {
    name: "",
    max: 0,
    minute: 0,
  };

  if (currentPage === "resin") {
    pages.name = "resin";
    pages.max = 160;
    pages.minute = 8;
  } else if (currentPage === "sanity") {
    pages.name = "sanity";
    pages.max = 135;
    pages.minute = 6;
  } else {
    pages.name = "resin";
    pages.max = 160;
    pages.minute = 8;
  }

  const title = String(
    `${pages.name.charAt(0).toUpperCase() + pages.name.slice(1)}`
  );
  const [resin, setResin] = useState(0);
  const [currResin, setCurrResin] = useState<number | null>(null);
  const [time, setTime] = useState(new Date());
  const [calculated, setCalculated] = useState(false);

  useEffect(() => {
    setResin(pages.max - (currResin === null ? 0 : currResin));
  }, [pages.max, currResin]);

  const reset = (name: string) => {
    setCurrentPage(name);
    setResin(0);
    setCurrResin(null);
    setCalculated(false);
  };

  const calculateTime = () => {
    const customTimeMs = resin * pages.minute * 60 * 1000; // convert minutes to milliseconds
    const newTime = new Date(Date.now() + customTimeMs);
    setTime(newTime);
    setCalculated(true);
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    calculateTime();
  };

  return (
    <>
      <Head>
        <title>{title} Calculator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="mx-4 mt-4 flex h-16 justify-between">
          <button
            onClick={() => reset("sanity")}
            className="flex h-full items-center rounded-lg bg-blue-700 px-5 font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
          >
            Sanity
          </button>
          <button
            onClick={() => reset("resin")}
            className="flex h-full items-center rounded-lg bg-blue-700 px-5 font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
          >
            Resin
          </button>
        </div>
        <div className="gap-12 px-4 py-16 text-center ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            {title} Calculator
          </h1>
        </div>
        <form className="mx-4 flex flex-col gap-y-4" onSubmit={handleSubmit}>
          <label
            htmlFor={pages.name}
            className="mb-2 block font-medium text-gray-900 dark:text-white"
          >
            {pages.name}
          </label>
          <input
            type="number"
            id={pages.name}
            placeholder={`input current ${pages.name}`}
            min={0}
            max={pages.max}
            className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
            required
            value={currResin === null ? "" : currResin}
            onChange={(e) => {
              if (Number(e.target.value) < 0) {
                setCurrResin(0);
              } else if (Number(e.target.value) > pages.max) {
                setCurrResin(pages.max);
              } else {
                setCurrResin(Number(e.target.value));
              }
            }}
          />
          <div className="flex items-center ">
            <button className="rounded-lg bg-blue-700 px-5 py-6 font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 lg:w-2/12">
              Calculate
            </button>
            <div className="ml-4  text-xs tracking-tight text-white sm:text-[5rem]">
              {calculated && currResin !== null ? `${resin} ${title}` : ""}
            </div>
          </div>

          <div className="text-center tracking-tight text-white sm:text-[5rem]">
            {calculated && currResin !== null
              ? `Will be full at: ${time.toLocaleTimeString()}`
              : ""}
          </div>
        </form>
        <a
          href="https://github.com/taufiqidr/calculator"
          target="_blank"
          className="absolute bottom-0 right-0 m-4"
        >
          <p className="text-center text-white hover:text-blue-500">
            Contribute in this project
          </p>
        </a>
      </main>
    </>
  );
};

export default Home;
